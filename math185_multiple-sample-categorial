# unpaired dice
load('casino_die2.rda')
X = as.factor(X)
Y = as.factor(Y)

Counts = matrix(NA, 2, 6)
Counts[1,] = table(X)
Counts[2,] = table(Y)
Counts = as.data.frame(Counts) # to make it look nice
names(Counts) = 1:6
row.names(Counts) = c('X', 'Y')
Counts

Counts = as.matrix(Counts) # to make the functions below work properly
barplot(Counts, legend=TRUE, args.legend=list(x = "top"))
barplot(Counts, beside=TRUE, legend=TRUE, args.legend=list(x = "top"))
chisq.test(Counts)


# paired dice
load('casino_die3.rda')
X = as.factor(X)
Y = as.factor(Y)

Counts = table(X, Y)  # joint counts
Counts

# Suppose we know the dice are fair
ZCounts = as.vector(Counts) # counts for the factor Z
barplot(ZCounts)
chisq.test(ZCounts) # the p-value is large so we fail to reject the null

# Suppose we do not know that the dice are fair
addmargins(Counts)  # contingency table
barplot(Counts, legend=TRUE, args.legend=list(x = "top"))
barplot(Counts, beside=TRUE, legend=TRUE, args.legend=list(x = "top"))
mosaicplot(Counts)
chisq.test(Counts) # test of independence


# The HairEyeColor is a dataset already loaded in R
?HairEyeColor
str(HairEyeColor)

# We ignore Sex and simply combine the two tables
dat = HairEyeColor[,,1] + HairEyeColor[,,2]

# Contingency table with margins
addmargins(dat)

# mosaic plot
mosaicplot(dat)

# Barplots
quartz(width=8, height=8)
par(mfrow = c(2, 2))
barplot(dat, legend=TRUE, args.legend=list(x = "topright"))
barplot(dat, beside=TRUE, legend=TRUE, args.legend=list(x = "topright"))
barplot(t(dat), legend=TRUE, args.legend=list(x = "topright"))
barplot(t(dat), beside=TRUE, legend=TRUE, args.legend=list(x = "top"))

# Chi-square test of independence
test = chisq.test(dat, correct = FALSE)
test
# The test is highly significant, meaning we reject the null that Hair and Eye are independent.
test$exp # expected counts
test$res # residuals --- we see that the combination (Blond, Blue) is more frequent than what would expected under independence

# simulated p-value
chisq.test(dat, sim=TRUE)

fisher.test(dat) # complete enumeration not possible

# Fisher's exact test, with examples taken from the help file
?fisher.test
TeaTasting =
matrix(c(3, 1, 1, 3),
       nrow = 2,
       dimnames = list(Guess = c("Milk", "Tea"),
                       Truth = c("Milk", "Tea")))
fisher.test(TeaTasting, alternative = "greater")

